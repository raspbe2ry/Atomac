@{ Layout = null; }

@Styles.Render("~/Content/css")
@Styles.Render("~/Content/chessboard")

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Gameplay</title>
</head>
<body>
    <div class="container">
        <div class="row">
            <div id="centralStage" class="col-md-9">
                <div id="glavnaTabla" class="velikaTabla">
                    <!-- sahovska tabla igraca -->
                </div>
            </div>
            <div id="sideBar" class="col-md-3">
                <div id="sporednaTabla" class="malaTabla">
                    <!-- sahovska tabla saigraca -->
                </div>
                <div id="chatBar" class="chatContainer">
                    <h1>OVO JE CHAT</h1>
                    <!-- chat -->
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
@Scripts.Render("~/bundles/chessboard")

<script type="text/javascript">

    let glavnaTablaId = 'glavnaTabla';
    let glavnaTabla, game = new Chess();

    let removeGreySquares = () => {
        $('#' + glavnaTablaId + ' .square-55d63').css('background', '');
    };

    let greySquare = (square) => {
        let squareEl = $('#' + glavnaTablaId + ' .square-' + square);

        let background = '#a9a9a9';
        if (squareEl.hasClass('black-3c85d') === true) {
            background = '#696969';
        }

        squareEl.css('background', background);
    };

    let onDragStart = (source, piece) => {
        // do not pick up pieces if the game is over
        // or if it's not that side's turn
        if (game.game_over() === true || (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
                (game.turn() === 'b' && piece.search(/^w/) !== -1))
            return false;
    };

    let onDrop = (source, target) => {
        removeGreySquares();

        // see if the move is legal
        let move = game.move({
            from: source,
            to: target,
            promotion: 'q' // NOTE: always promote to a queen for example simplicity
        });

        // illegal move
        if (move === null) return 'snapback';
    };

    let onMouseoverSquare = (square, piece) => {
        // get list of possible moves for this square
        let moves = game.moves({
            square: square,
            verbose: true
        });

        // exit if there are no moves available for this square
        if (moves.length === 0) return;

        // highlight the square they moused over
        greySquare(square);

        // highlight the possible squares for this piece
        for (let i = 0; i < moves.length; i++) {
            greySquare(moves[i].to);
        }
    };

    let onMouseoutSquare = (square, piece) => {
        removeGreySquares();
    };

    let onSnapEnd = () => {
        glavnaTabla.position(game.fen());
    };

    let glavnaConf = {
        position: 'start',
        showNotation: false,
        pieceTheme: '@Url.Content("~/Content/img/chesspieces/wikipedia/{piece}.png")',
        draggable: true,
        dropOffBoard: 'snapback',
        onDragStart: onDragStart,
        onDrop: onDrop,
        onMouseoutSquare: onMouseoutSquare,
        onMouseoverSquare: onMouseoverSquare,
        onSnapEnd: onSnapEnd
    };

    glavnaTabla = new ChessBoard(glavnaTablaId, glavnaConf);
    $(window).resize(glavnaTabla.resize);

    let sporednaConf = {
        orientation: 'black',
        position: 'start',
        showNotation: false,
        pieceTheme: '@Url.Content("~/Content/img/chesspieces/wikipedia/{piece}.png")',
        draggable: false
    };

    let sporednaTablaId = 'sporednaTabla';
    let sporednaTabla = new ChessBoard('sporednaTabla', sporednaConf);

</script>
